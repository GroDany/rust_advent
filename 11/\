use std::env;
use std::fs;

#[derive(Debug)]
struct Monkey {
    id: i32,
    items: Vec<i32>,
    operands: Vec<String>,
    mult: i32,
    true_monkey: i32,
    false_monkey: i32,
}

impl Monkey {
    fn from(monkey: &str) -> Monkey {
        let monkey = monkey.split("\n").collect::<Vec<&str>>();
        let id = monkey[0].replace("Monkey ", "").replace(":", "").parse::<i32>().unwrap();

        let items = monkey[1].replace("  Starting items: ", "");
        let items = items.split(", ");
        let items = items.map(|item| item.parse::<i32>().unwrap()).collect::<Vec<i32>>();

        let operands = monkey[2].replace("  Operation: new = ", "");
        let operands = operands.split(" ").map(|s| String::from(s)).collect::<Vec<String>>();

        let mult = monkey[3].replace("  Test: divisible by ", "").parse::<i32>().unwrap();
        let tm = monkey[4].replace("    If true: throw to monkey ", "").parse::<i32>().unwrap();
        let fm = monkey[5].replace("    If false: throw to monkey ", "").parse::<i32>().unwrap();

        Monkey {
            id: id,
            items: items, 
            operands: operands,
            mult: mult,
            true_monkey: tm,
            false_monkey: fm,
        }
    }
}


// https://adventofcode.com/2022/day/10
fn main() {
    let args: Vec<String> = env::args().collect();
    match args.len() {
        1 => {
            println!("Try passing the input file path!");
        }
        2 => {
            if let Ok(file) = fs::read_to_string(&args[1]) {
                let monkey_confs = file.split("\n\n");
                let monkeys: Vec<Monkey> = Vec::new();
                for monkey_conf in monkey_confs {
                    if monkey_conf.is_empty() {
                        break;
                    }
                    monkeys.push(Monkey::from(monkey_conf));
                    dbg!(monkeys);
                }
            } else {
                println!("Invalid file name: {}", &args[1]);
            }
        }
        _ => {
            println!("Invalid number of arguments.");
        }
    }
}

